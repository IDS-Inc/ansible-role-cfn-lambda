- name: Create necessary directories
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ lambda_build_dir }}"
    - "{{ lambda_template_dir }}"

- name: Set source code file contents
  set_fact:
    lambda_source_code_file_contents: "{{ lookup('file',lambda_source_code_file )}}"
  when: lambda_source_code_file is defined

- name: Test code
  shell: ". {{ lambda_testing_script }}"
  when: lambda_test_code is defined and lambda_test_code == 'yes'

- name: Remove virtualenv dir
  file:
    state: absent
    path: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'


- name: Create virtualenv dir
  file:
    state: directory
    path: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'


- name: Copy files to virtualenv
  command: "cp {{ item }} {{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}/"
  with_items: "{{ lambda_dependencies }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes' and lambda_dependencies is defined

- name: Create virtualenv
  pip:
    virtualenv: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}"
    requirements: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}/{{ lambda_requirements_file }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'

- name: Add lambda code to bundle
  shell: "zip -9 {{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}/{{ lambda_code_zipfile }} *"
  args:
    chdir: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'

- name: Add dependent packages to bundle
  shell: "zip -r9 {{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}/{{ lambda_code_zipfile }} *"
  args:
    chdir: "{{ lambda_virtualenv_site_packages }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'

- name: Upload lambda function code
  command: aws s3 cp {{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}/{{ lambda_code_zipfile }} s3://{{ lambda_code_s3_bucket }}/{{ lambda_code_s3_key }}
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'

- name: Remove virtualenv dir
  file:
    state: absent
    path: "{{ lambda_build_dir }}/{{ lambda_virtualenv_dir }}"
  when: lambda_create_bundle is defined and lambda_create_bundle == 'yes'

- name: Template lambda function
  template:
    src: "lambda.json.j2"
    dest: "{{ lambda_template_dir }}/{{ lambda_template_name }}-raw"

- name: Clean up template
  shell: "python -mjson.tool {{ lambda_template_dir }}/{{ lambda_template_name }}-raw > {{ lambda_template_dir }}/{{ lambda_template_name }}"

- name: Create or Remove lambda stack
  cloudformation:
    region: "{{ lambda_region }}"
    template: "{{ lambda_template_dir }}/{{ lambda_template_name }}"
    stack_name: "{{ lambda_stack_name }}"
    state: "{{ lambda_stack_state|default('present') }}"
    template_parameters:
      FunctionName: "{{ lambda_function_name }}"
      Description: "{{ lambda_description }}"
      HandlerName: "{{ lambda_handler_name }}"
      Runtime: "{{ lambda_runtime }}"
      Timeout: "{{ lambda_timeout }}"
      MemorySize: "{{ lambda_mem_size }}"
      IAMRoleArn: "{{ lambda_iam_role_arn }}"
      KmsKeyArn: "{{ lambda_kms_key_arn | default(omit,true) }}"
      DeadLetterArn: "{{ lambda_dead_letter_arn }}"
    tags: "{{ lambda_tags }}"
    security_token: "{{ lookup('env','AWS_SESSION_TOKEN')|default(omit, true) }}"
  register: lambda_stack_output
  when: lambda_do_deploy == 'yes'
