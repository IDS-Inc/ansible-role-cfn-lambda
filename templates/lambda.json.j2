{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "{{ lambda_stack_description | default('') }}",
  "Parameters" : {
    "FunctionName" : {
      "Type" : "String"
    },
    "Description" : {
      "Type" : "String"
    },
    "HandlerName" : {
      "Type" : "String"
    },
    "Runtime" : {
      "Type" : "String"
    },
    "Timeout" : {
      "Type" : "Number"
    },
    "MemorySize" : {
      "Type" : "Number"
    },
    "IAMRoleArn" : {
      "Type" : "String"
    }
  },
  "Resources" : {
    "LambdaFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          {% if lambda_create_bundle is defined and lambda_create_bundle == 'yes' %}
          "S3Bucket": "{{ lambda_code_s3_bucket }}",
          "S3Key": "{{ lambda_code_s3_key }}"
            {% if lambda_code_s3_object_version is defined %}
            , "S3ObjectVersion": "{{ lambda_code_s3_object_version }}"
            {% endif %}
          {% elif lambda_source_code is defined or lambda_source_code_file is defined %}
          "ZipFile" : {
            {% if lambda_source_code_file_contents is defined %}
            {% set lambda_source_code = lambda_source_code_file_contents.split('\n') %}
            {% endif %}
            "Fn::Join" : ["\n", [
              {% for line in lambda_source_code  %}
              "{{ line |  regex_replace('\"','\\\"') }}"
              {% if not loop.last %}, {% endif %}
              {% endfor %}
            ]]
          }
          {% endif %}
        },
        "Description" : "{{ lambda_description | default('') }}",
        {% if lambda_function_name != '' %}"FunctionName" : { "Ref" : "FunctionName" },{% endif %}
        "Handler" : { "Ref" : "HandlerName" },
        "MemorySize" : { "Ref" : "MemorySize" },
        "Role" : { "Ref" : "IAMRoleArn" },
        "Runtime" : { "Ref" : "Runtime" },
        {% if lambda_use_vpc is defined %}
        "VpcConfig" : {
          "SecurityGroupIds" : [
            {% for sg in lambda_security_group_ids %}
            "{{ sg }}"
            {% if not loop.last %}, {% endif %}
            {% endfor %}
          ],
          "SubnetIds" : [
            {% for subnet in lambda_subnet_ids %}
            "{{ subnet }}"
            {% if not loop.last %}, {% endif %}
            {% endfor %}
          ]
        },
        {% endif %}
        "Timeout" : { "Ref" : "Timeout" }
      }
    }
    {% if lambda_cloudwatch_rules is defined %}
    {% for rule in lambda_cloudwatch_rules %}
    ,
    "{{ rule.name }}": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "{{ rule.description }}",
        {% if rule.schedule is defined %}
        "ScheduleExpression": "{{ rule.schedule }}",
        {% elif rule.pattern is defined %}
        "EventPattern" : {
          {% if rule.pattern.version is defined %}
          "version": "{{ rule.pattern.version }}",
          {% endif %}
          {% if rule.pattern.id is defined %}
          "id": "{{ rule.pattern.id }}",
          {% endif %}
          {% if rule.pattern.detail_type is defined %}
          "detail-type": ["{{ rule.pattern.detail_type }}"],
          {% endif %}
          {% if rule.pattern.account is defined %}
          "account": "{{ rule.pattern.account }}",
          {% endif %}
          {% if rule.pattern.time is defined %}
          "time": "{{ rule.pattern.time }}",
          {% endif %}
          {% if rule.pattern.region is defined %}
          "region": "{{ rule.pattern.region }}",
          {% endif %}
          {% if rule.pattern.resources is defined %}
          "resources": [
            {% for resource in rule.pattern.resources %}
            "{{ resource }}"
            {% if not loop.last %}, {% endif %}
            {% endfor %}
          ],
          {% endif %}
          {% if rule.pattern.detail is defined %}
          "detail": {
            {% for key in rule.pattern.detail.keys() %}
            "{{ key }}": ["{{ rule.pattern.detail[key] }}"]
            {% if not loop.last %}, {% endif %}
            {% endfor %}
          },
          {% endif %}
          "source": [
            {% for source in rule.pattern.sources %}
            "{{ source }}"
            {% if not loop.last %}, {% endif %}
            {% endfor %}
          ]
        },
        {% endif %}
        "State": "{{ rule.state | default(lambda_rule_state) }}",
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
            "Id": "LambdaFunction"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["{{ rule.name }}", "Arn"] }
      }
    }
    {% endfor %}
    {% endif %}
    {% if lambda_permissions is defined %}
    ,
    {% for permission in lambda_permissions %}
    "{{ permission.name }}" : {
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {{ permission.properties | to_json }}
    }
    {% if not loop.last %}, {% endif %}
    {% endfor %}
    {% endif %}
  },
  "Outputs" : {
    "FunctionName" : { "Value": { "Ref": "LambdaFunction" }, "Description": "Name of the function" },
    "FunctionArn" : { "Value": { "Fn::GetAtt" : [ "LambdaFunction", "Arn" ] } }
  }
}
